#!/usr/bin/env python3
"""
Example of programmatic usage of Dayflow.
Shows how to integrate the components in your own scripts.
"""

import json
from datetime import date, datetime, timedelta
from pathlib import Path

from dayflow.core import CalendarSyncEngine, GraphAPIClient, ObsidianNoteFormatter
from dayflow.vault import VaultConfig, VaultConnection


def main():
    """Example integration of all components."""

    # 1. Load authentication token
    token_file = Path(".graph_token")
    if not token_file.exists():
        print("No token found. Please run: dayflow auth login")
        return

    with open(token_file, "r") as f:
        token_data = json.load(f)
    access_token = token_data["access_token"]

    # 2. Set up vault connection
    try:
        config = VaultConfig()
        vault_connection = VaultConnection(config)
        print(f"Using vault: {config.vault_path}")
    except Exception as e:
        print(f"Vault not configured: {e}")
        print("Please run: dayflow vault setup")
        return

    # 3. Create sync engine
    sync_engine = CalendarSyncEngine(access_token, vault_connection)

    # 4. Perform sync with custom date range
    start_date = date.today() - timedelta(days=7)
    end_date = date.today() + timedelta(days=14)

    print(f"\nSyncing events from {start_date} to {end_date}...")

    try:
        result = sync_engine.sync(start_date, end_date)

        print(f"\nâœ“ Synced {result['events_synced']} events")
        print(f"âœ“ Created {result['notes_created']} new notes")
        print(f"âœ“ Updated {result['notes_updated']} existing notes")

        # Show some event details
        if result["events"]:
            print("\nEvents processed:")
            for event in result["events"][:5]:
                print(
                    f"  - {event['subject']} ({event['start_time'].strftime('%Y-%m-%d %H:%M')})"
                )

    except Exception as e:
        print(f"Error during sync: {e}")
        return

    # 5. Direct API usage example
    print("\n" + "=" * 60)
    print("DIRECT API USAGE EXAMPLE")
    print("=" * 60)

    # Create Graph API client directly
    graph_client = GraphAPIClient(access_token)

    # Fetch today's events
    today = date.today()
    events = graph_client.fetch_calendar_events(today, today)

    print(f"\nToday's events ({len(events)} total):")

    # Format and display events
    formatter = ObsidianNoteFormatter()
    for event in events:
        filename = formatter.generate_filename(event)
        print(f"\nðŸ“… {filename}")
        print(f"   Subject: {event['subject']}")
        print(
            f"   Time: {event['start_time'].strftime('%H:%M')} - {event['end_time'].strftime('%H:%M')}"
        )
        if event.get("location"):
            print(f"   Location: {event['location']}")
        if event.get("attendees"):
            print(f"   Attendees: {len(event['attendees'])} people")

    # 6. Create a custom note
    print("\n" + "=" * 60)
    print("CUSTOM NOTE CREATION EXAMPLE")
    print("=" * 60)

    # Create a summary note
    summary_content = f"""---
title: Calendar Sync Summary
date: {date.today()}
type: summary
tags: [calendar-sync, automated]
---

# Calendar Sync Summary

Generated on: {date.today().strftime('%Y-%m-%d')}

## Statistics
- Events synced: {result['events_synced']}
- Notes created: {result['notes_created']}
- Notes updated: {result['notes_updated']}

## Date Range
- Start: {start_date}
- End: {end_date}

## Notes
This summary was automatically generated by the calendar sync process.
"""

    summary_filename = f"{date.today()} Calendar Sync Summary.md"
    summary_path = vault_connection.write_note(
        summary_content, summary_filename, "calendar_events"
    )

    print(f"Created summary note: {summary_path}")


def example_custom_formatter():
    """Example of customizing the note formatter."""

    class CustomFormatter(ObsidianNoteFormatter):
        """Custom formatter with additional features."""

        def format_event(self, event, tags=None):
            """Add custom formatting."""
            # Call parent formatter
            content = super().format_event(event, tags)

            # Add custom sections
            custom_section = "\n## Meeting Preparation\n\n- [ ] Review agenda\n- [ ] Prepare materials\n- [ ] Test technology\n"

            # Insert before the Notes section
            content = content.replace("## Notes", custom_section + "\n## Notes")

            return content

    # Use custom formatter
    formatter = CustomFormatter()

    event = {
        "subject": "Important Client Meeting",
        "start_time": datetime.now(),
        "end_time": datetime.now() + timedelta(hours=1),
        "is_all_day": False,
    }

    formatted = formatter.format_event(event, tags=["client", "important"])
    print("\nCustom formatted note preview:")
    print(formatted)


if __name__ == "__main__":
    print("Dayflow - Integration Example")
    print("=" * 60)

    # Run main integration
    main()

    # Show custom formatter example
    print("\n" + "=" * 60)
    print("CUSTOM FORMATTER EXAMPLE")
    print("=" * 60)
    example_custom_formatter()
